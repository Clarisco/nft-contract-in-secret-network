{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1","program":"/home/clarisco/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bincode2","/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=dcb1ef54ba96afd8","-C","extra-filename=-dcb1ef54ba96afd8","--out-dir","/home/clarisco/Desktop/nftsgit/target/rls/debug/deps","-L","dependency=/home/clarisco/Desktop/nftsgit/target/rls/debug/deps","--extern","byteorder=/home/clarisco/Desktop/nftsgit/target/rls/debug/deps/libbyteorder-6510b8dc879d468d.rmeta","--extern","serde=/home/clarisco/Desktop/nftsgit/target/rls/debug/deps/libserde-3ad119ddeaa30e9b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/clarisco/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/clarisco/Desktop/nftsgit/target/rls/debug/deps/libbincode2-dcb1ef54ba96afd8.rmeta"},"prelude":{"crate_id":{"name":"bincode2","disambiguator":[3842616195488809993,0]},"crate_root":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src","external_crates":[{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12872056181829019095,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8373705112501149482,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16909867051943430517,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11260902004430380252,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10608756751411298727,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4369074810188542311,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12333111663820923515,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12748886438148098175,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6627577059144635863,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15896330838049133250,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2582212836281766037,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4723863376138925013,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[2482912266844122781,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16993901708144586312,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[15622067442351408235,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[12927959315880918009,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[1763799641200411356,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[2454364557606196642,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[10980657607002924382,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":20,"id":{"name":"byteorder","disambiguator":[5999432839203998272,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":21,"id":{"name":"serde","disambiguator":[6887994519683560859,0]}},{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","num":22,"id":{"name":"serde_derive","disambiguator":[10886249611235360422,0]}}],"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":0,"byte_end":5036,"line_start":1,"line_end":172,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1024},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":927,"byte_end":933,"line_start":36,"line_end":36,"column_start":18,"column_end":24},"alias_span":null,"name":"Config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1010},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":935,"byte_end":947,"line_start":36,"line_end":36,"column_start":26,"column_end":38},"alias_span":null,"name":"LengthOption","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":283},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":969,"byte_end":980,"line_start":37,"line_end":37,"column_start":20,"column_end":31},"alias_span":null,"name":"BincodeRead","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":982,"byte_end":990,"line_start":37,"line_end":37,"column_start":33,"column_end":41},"alias_span":null,"name":"IoReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":290},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":992,"byte_end":1003,"line_start":37,"line_end":37,"column_start":43,"column_end":54},"alias_span":null,"name":"SliceReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1022,"byte_end":1027,"line_start":38,"line_end":38,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1053},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1029,"byte_end":1038,"line_start":38,"line_end":38,"column_start":24,"column_end":33},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":501},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1040,"byte_end":1046,"line_start":38,"line_end":38,"column_start":35,"column_end":41},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":0,"byte_end":5036,"line_start":1,"line_end":172,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":228},{"krate":0,"index":481},{"krate":0,"index":517},{"krate":0,"index":634},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":954},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":971},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":984}],"decl_id":null,"docs":" Bincode2 is a crate for encoding and decoding using a tiny binary\n serialization strategy.  Using it, you can easily go from having\n an object in memory, quickly serialize it to bytes, and then\n deserialize it back just as fast!","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/ Bincode2 is a crate for encoding and decoding using a tiny binary","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":24,"byte_end":93,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"/ serialization strategy.  Using it, you can easily go from having","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":94,"byte_end":162,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/ an object in memory, quickly serialize it to bytes, and then","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":163,"byte_end":227,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/ deserialize it back just as fast!","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":228,"byte_end":265,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":266,"byte_end":269,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ### Using Basic Functions","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":270,"byte_end":299,"line_start":8,"line_end":8,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":300,"byte_end":303,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```edition2018","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":304,"byte_end":322,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/ fn main() {","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":323,"byte_end":338,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/     // The object that we will serialize.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":339,"byte_end":384,"line_start":12,"line_end":12,"column_start":1,"column_end":46}},{"value":"/     let target: Option<String>  = Some(\"hello world\".to_string());","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":385,"byte_end":455,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":456,"byte_end":459,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/     let encoded: Vec<u8> = bincode2::serialize(&target).unwrap();","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":460,"byte_end":529,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/     let decoded: Option<String> = bincode2::deserialize(&encoded[..]).unwrap();","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":530,"byte_end":613,"line_start":16,"line_end":16,"column_start":1,"column_end":84}},{"value":"/     assert_eq!(target, decoded);","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":614,"byte_end":650,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":651,"byte_end":656,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":657,"byte_end":664,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"crate_name = \"bincode2\"","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":719,"byte_end":746,"line_start":22,"line_end":22,"column_start":1,"column_end":28}},{"value":"crate_type = \"rlib\"","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":747,"byte_end":770,"line_start":23,"line_end":23,"column_start":1,"column_end":24}},{"value":"crate_type = \"dylib\"","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":771,"byte_end":795,"line_start":24,"line_end":24,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":74},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":5421,"byte_end":5426,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Limit","qualname":"::config::Options::Limit","value":"type Limit: SizeLimit + 'static;","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":5458,"byte_end":5464,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"name":"Endian","qualname":"::config::Options::Endian","value":"type Endian: ByteOrder + 'static;","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":76},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":5496,"byte_end":5506,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"StringSize","qualname":"::config::Options::StringSize","value":"type StringSize: SizeType + 'static;","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":5537,"byte_end":5546,"line_start":16,"line_end":16,"column_start":10,"column_end":19},"name":"ArraySize","qualname":"::config::Options::ArraySize","value":"type ArraySize: SizeType + 'static;","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1011},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7572,"byte_end":7575,"line_start":106,"line_end":106,"column_start":5,"column_end":8},"name":"U64","qualname":"::config::LengthOption::U64","value":"LengthOption::U64","parent":{"krate":0,"index":1010},"children":[],"decl_id":null,"docs":"64 unsigned bits\n","sig":null,"attributes":[{"value":"/64 unsigned bits","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7548,"byte_end":7567,"line_start":105,"line_end":105,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1013},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7605,"byte_end":7608,"line_start":108,"line_end":108,"column_start":5,"column_end":8},"name":"U32","qualname":"::config::LengthOption::U32","value":"LengthOption::U32","parent":{"krate":0,"index":1010},"children":[],"decl_id":null,"docs":"32 unsigned bits\n","sig":null,"attributes":[{"value":"/32 unsigned bits","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7581,"byte_end":7600,"line_start":107,"line_end":107,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1015},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7638,"byte_end":7641,"line_start":110,"line_end":110,"column_start":5,"column_end":8},"name":"U16","qualname":"::config::LengthOption::U16","value":"LengthOption::U16","parent":{"krate":0,"index":1010},"children":[],"decl_id":null,"docs":"16 unsigned bits\n","sig":null,"attributes":[{"value":"/16 unsigned bits","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7614,"byte_end":7633,"line_start":109,"line_end":109,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1017},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7670,"byte_end":7672,"line_start":112,"line_end":112,"column_start":5,"column_end":7},"name":"U8","qualname":"::config::LengthOption::U8","value":"LengthOption::U8","parent":{"krate":0,"index":1010},"children":[],"decl_id":null,"docs":"8 unsigned bits\n","sig":null,"attributes":[{"value":"/8 unsigned bits","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7647,"byte_end":7665,"line_start":111,"line_end":111,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1010},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7529,"byte_end":7541,"line_start":104,"line_end":104,"column_start":10,"column_end":22},"name":"LengthOption","qualname":"::config::LengthOption","value":"pub enum LengthOption { U64, U32, U16, U8, }","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1013},{"krate":0,"index":1015},{"krate":0,"index":1017}],"decl_id":null,"docs":" Used to specify the unit used for length of strings and arrays via `config.string_length` or `config.array_length`.\n","sig":null,"attributes":[{"value":"/ Used to specify the unit used for length of strings and arrays via `config.string_length` or `config.array_length`.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7370,"byte_end":7489,"line_start":102,"line_end":102,"column_start":1,"column_end":120}}]},{"kind":"Struct","id":{"krate":0,"index":1024},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8896,"byte_end":8902,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"Config","qualname":"::config::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028}],"decl_id":null,"docs":" A configuration builder whose options Bincode will use\n while serializing and deserializing.","sig":null,"attributes":[{"value":"/ A configuration builder whose options Bincode will use","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7677,"byte_end":7735,"line_start":115,"line_end":115,"column_start":1,"column_end":59}},{"value":"/ while serializing and deserializing.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7736,"byte_end":7776,"line_start":116,"line_end":116,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7777,"byte_end":7780,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ ### Options","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7781,"byte_end":7796,"line_start":118,"line_end":118,"column_start":1,"column_end":16}},{"value":"/ Endianness: The endianness with which multi-byte integers will be read/written.  *default: little endian*","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7797,"byte_end":7906,"line_start":119,"line_end":119,"column_start":1,"column_end":110}},{"value":"/ Limit: The maximum number of bytes that will be read/written in a bincode serialize/deserialize. *default: unlimited*","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":7907,"byte_end":8028,"line_start":120,"line_end":120,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8029,"byte_end":8032,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ### Byte Limit Details","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8033,"byte_end":8059,"line_start":122,"line_end":122,"column_start":1,"column_end":27}},{"value":"/ The purpose of byte-limiting is to prevent Denial-Of-Service attacks whereby malicious attackers get bincode","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8060,"byte_end":8172,"line_start":123,"line_end":123,"column_start":1,"column_end":113}},{"value":"/ deserialization to crash your process by allocating too much memory or keeping a connection open for too long.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8173,"byte_end":8287,"line_start":124,"line_end":124,"column_start":1,"column_end":115}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8288,"byte_end":8291,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ When a byte limit is set, bincode will return `Err` on any deserialization that goes over the limit, or any","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8292,"byte_end":8403,"line_start":126,"line_end":126,"column_start":1,"column_end":112}},{"value":"/ serialization that goes over the limit.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8404,"byte_end":8447,"line_start":127,"line_end":127,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8448,"byte_end":8451,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ ### Array and String sizes","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8452,"byte_end":8482,"line_start":129,"line_end":129,"column_start":1,"column_end":31}},{"value":"/ When writing a string or an array is serialized the length is written at the beginning so that the data","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8483,"byte_end":8590,"line_start":130,"line_end":130,"column_start":1,"column_end":108}},{"value":"/ can be deserialized. The option is a way to configure how this length is encoded. The default for both","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8591,"byte_end":8697,"line_start":131,"line_end":131,"column_start":1,"column_end":107}},{"value":"/ is `U64`.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8698,"byte_end":8711,"line_start":132,"line_end":132,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8712,"byte_end":8715,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ If a string or array is attempted to be serialized that is not fit within the type specified bincode will return `Err`","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8716,"byte_end":8838,"line_start":134,"line_end":134,"column_start":1,"column_end":123}},{"value":"/ on serialization.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":8839,"byte_end":8860,"line_start":135,"line_end":135,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14694,"byte_end":14702,"line_start":354,"line_end":354,"column_start":12,"column_end":20},"name":"no_limit","qualname":"<Config>::no_limit","value":"pub fn no_limit(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the byte limit to be unlimited.\n This is the default.\n","sig":null,"attributes":[{"value":"/ Sets the byte limit to be unlimited.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14591,"byte_end":14631,"line_start":351,"line_end":351,"column_start":5,"column_end":45}},{"value":"/ This is the default.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14636,"byte_end":14660,"line_start":352,"line_end":352,"column_start":5,"column_end":29}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14665,"byte_end":14682,"line_start":353,"line_end":353,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14867,"byte_end":14872,"line_start":361,"line_end":361,"column_start":12,"column_end":17},"name":"limit","qualname":"<Config>::limit","value":"pub fn limit(&mut Self, u64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the byte limit to `limit`.\n","sig":null,"attributes":[{"value":"/ Sets the byte limit to `limit`.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14798,"byte_end":14833,"line_start":359,"line_end":359,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14838,"byte_end":14855,"line_start":360,"line_end":360,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15088,"byte_end":15101,"line_start":369,"line_end":369,"column_start":12,"column_end":25},"name":"little_endian","qualname":"<Config>::little_endian","value":"pub fn little_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the endianness to little-endian\n This is the default.\n","sig":null,"attributes":[{"value":"/ Sets the endianness to little-endian","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14985,"byte_end":15025,"line_start":366,"line_end":366,"column_start":5,"column_end":45}},{"value":"/ This is the default.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15030,"byte_end":15054,"line_start":367,"line_end":367,"column_start":5,"column_end":29}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15059,"byte_end":15076,"line_start":368,"line_end":368,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15267,"byte_end":15277,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"big_endian","qualname":"<Config>::big_endian","value":"pub fn big_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the endianness to big-endian\n","sig":null,"attributes":[{"value":"/ Sets the endianness to big-endian","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15196,"byte_end":15233,"line_start":374,"line_end":374,"column_start":5,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15238,"byte_end":15255,"line_start":375,"line_end":375,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15463,"byte_end":15476,"line_start":383,"line_end":383,"column_start":12,"column_end":25},"name":"native_endian","qualname":"<Config>::native_endian","value":"pub fn native_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the endianness to the the machine-native endianness\n","sig":null,"attributes":[{"value":"/ Sets the endianness to the the machine-native endianness","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15369,"byte_end":15429,"line_start":381,"line_end":381,"column_start":5,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15434,"byte_end":15451,"line_start":382,"line_end":382,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15650,"byte_end":15663,"line_start":390,"line_end":390,"column_start":12,"column_end":25},"name":"string_length","qualname":"<Config>::string_length","value":"pub fn string_length(&mut Self, LengthOption) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the size used for lengths of strings\n","sig":null,"attributes":[{"value":"/ Sets the size used for lengths of strings","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15571,"byte_end":15616,"line_start":388,"line_end":388,"column_start":5,"column_end":50}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15621,"byte_end":15638,"line_start":389,"line_end":389,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15845,"byte_end":15857,"line_start":397,"line_end":397,"column_start":12,"column_end":24},"name":"array_length","qualname":"<Config>::array_length","value":"pub fn array_length(&mut Self, LengthOption) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the size used for lengths of arrays\n","sig":null,"attributes":[{"value":"/ Sets the size used for lengths of arrays","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15767,"byte_end":15811,"line_start":395,"line_end":395,"column_start":5,"column_end":49}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15816,"byte_end":15833,"line_start":396,"line_end":396,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16077,"byte_end":16086,"line_start":404,"line_end":404,"column_start":12,"column_end":21},"name":"serialize","qualname":"<Config>::serialize","value":"pub fn serialize<T: ?Sized + serde::Serialize>(&Self, &T) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Serializes a serializable object into a `Vec` of bytes using this configuration\n","sig":null,"attributes":[{"value":"/ Serializes a serializable object into a `Vec` of bytes using this configuration","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":15960,"byte_end":16043,"line_start":402,"line_end":402,"column_start":5,"column_end":88}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16048,"byte_end":16065,"line_start":403,"line_end":403,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16359,"byte_end":16374,"line_start":410,"line_end":410,"column_start":12,"column_end":27},"name":"serialized_size","qualname":"<Config>::serialized_size","value":"pub fn serialized_size<T: ?Sized + serde::Serialize>(&Self, &T) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the size that an object would be if serialized using Bincode with this configuration\n","sig":null,"attributes":[{"value":"/ Returns the size that an object would be if serialized using Bincode with this configuration","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16229,"byte_end":16325,"line_start":408,"line_end":408,"column_start":5,"column_end":101}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16330,"byte_end":16347,"line_start":409,"line_end":409,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16796,"byte_end":16810,"line_start":419,"line_end":419,"column_start":12,"column_end":26},"name":"serialize_into","qualname":"<Config>::serialize_into","value":"pub fn serialize_into<W: Write, T: ?Sized + serde::Serialize>(&Self, W, &T)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serializes an object directly into a `Writer` using this configuration","sig":null,"attributes":[{"value":"/ Serializes an object directly into a `Writer` using this configuration","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16519,"byte_end":16593,"line_start":414,"line_end":414,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16598,"byte_end":16601,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ If the serialization would take more bytes than allowed by the size limit, an error","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16606,"byte_end":16693,"line_start":416,"line_end":416,"column_start":5,"column_end":92}},{"value":"/ is returned and *no bytes* will be written into the `Writer`","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16698,"byte_end":16762,"line_start":417,"line_end":417,"column_start":5,"column_end":69}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":16767,"byte_end":16784,"line_start":418,"line_end":418,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17119,"byte_end":17130,"line_start":429,"line_end":429,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Config>::deserialize","value":"pub fn deserialize<'a, T: serde::Deserialize>(&Self, &'a [u8]) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes into an instance of `T` using this configuration\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes into an instance of `T` using this configuration","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17003,"byte_end":17085,"line_start":427,"line_end":427,"column_start":5,"column_end":87}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17090,"byte_end":17107,"line_start":428,"line_end":428,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17355,"byte_end":17375,"line_start":436,"line_end":436,"column_start":12,"column_end":32},"name":"deserialize_in_place","qualname":"<Config>::deserialize_in_place","value":"pub fn deserialize_in_place<'a, R, T>(&Self, R, &mut T) -> Result<()> where\nR: BincodeRead, T: serde::de::Deserialize","parent":null,"children":[],"decl_id":null,"docs":" TODO: document\n","sig":null,"attributes":[{"value":"/ TODO: document","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17284,"byte_end":17302,"line_start":433,"line_end":433,"column_start":5,"column_end":23}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17326,"byte_end":17343,"line_start":435,"line_end":435,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17727,"byte_end":17743,"line_start":446,"line_end":446,"column_start":12,"column_end":28},"name":"deserialize_seed","qualname":"<Config>::deserialize_seed","value":"pub fn deserialize_seed<'a, T: serde::de::DeserializeSeed>(&Self, T, &'a [u8])\n-> Result<T::Value>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes with state `seed` using this configuration.\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes with state `seed` using this configuration.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17616,"byte_end":17693,"line_start":444,"line_end":444,"column_start":5,"column_end":82}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17698,"byte_end":17715,"line_start":445,"line_end":445,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18154,"byte_end":18170,"line_start":458,"line_end":458,"column_start":12,"column_end":28},"name":"deserialize_from","qualname":"<Config>::deserialize_from","value":"pub fn deserialize_from<R: Read, T: serde::de::DeserializeOwned>(&Self, R)\n-> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er using this configuration","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er using this configuration","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":17963,"byte_end":18039,"line_start":454,"line_end":454,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18044,"byte_end":18047,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18052,"byte_end":18120,"line_start":456,"line_end":456,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18125,"byte_end":18142,"line_start":457,"line_end":457,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18566,"byte_end":18587,"line_start":469,"line_end":469,"column_start":12,"column_end":33},"name":"deserialize_from_seed","qualname":"<Config>::deserialize_from_seed","value":"pub fn deserialize_from_seed<'a, R: Read,\n                             T: serde::de::DeserializeSeed>(&Self, T, R)\n-> Result<T::Value>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er with state `seed` using this configuration","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er with state `seed` using this configuration","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18357,"byte_end":18451,"line_start":465,"line_end":465,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18456,"byte_end":18459,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18464,"byte_end":18532,"line_start":467,"line_end":467,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18537,"byte_end":18554,"line_start":468,"line_end":468,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19155,"byte_end":19178,"line_start":483,"line_end":483,"column_start":12,"column_end":35},"name":"deserialize_from_custom","qualname":"<Config>::deserialize_from_custom","value":"pub fn deserialize_from_custom<'a, R: BincodeRead,\n                               T: serde::de::DeserializeOwned>(&Self, R)\n-> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er using the default configuration.\n It is highly recommended to use `deserialize_from` unless you need to implement\n `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er using the default configuration.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18816,"byte_end":18905,"line_start":477,"line_end":477,"column_start":5,"column_end":94}},{"value":"/ It is highly recommended to use `deserialize_from` unless you need to implement","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18910,"byte_end":18993,"line_start":478,"line_end":478,"column_start":5,"column_end":88}},{"value":"/ `BincodeRead` for performance reasons.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":18998,"byte_end":19040,"line_start":479,"line_end":479,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19045,"byte_end":19048,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19053,"byte_end":19121,"line_start":481,"line_end":481,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19126,"byte_end":19143,"line_start":482,"line_end":482,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19744,"byte_end":19772,"line_start":496,"line_end":496,"column_start":12,"column_end":40},"name":"deserialize_from_custom_seed","qualname":"<Config>::deserialize_from_custom_seed","value":"pub fn deserialize_from_custom_seed<'a, R: BincodeRead,\n                                    T: serde::de::DeserializeSeed>(&Self, T,\n                                                                   R)\n-> Result<T::Value>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er with state `seed` using the default\n configuration. It is highly recommended to use `deserialize_from` unless you need to\n implement `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er with state `seed` using the default","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19387,"byte_end":19479,"line_start":490,"line_end":490,"column_start":5,"column_end":97}},{"value":"/ configuration. It is highly recommended to use `deserialize_from` unless you need to","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19484,"byte_end":19572,"line_start":491,"line_end":491,"column_start":5,"column_end":93}},{"value":"/ implement `BincodeRead` for performance reasons.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19577,"byte_end":19629,"line_start":492,"line_end":492,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19634,"byte_end":19637,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19642,"byte_end":19710,"line_start":494,"line_end":494,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":19715,"byte_end":19732,"line_start":495,"line_end":495,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":20187,"byte_end":20204,"line_start":511,"line_end":511,"column_start":12,"column_end":29},"name":"with_deserializer","qualname":"<Config>::with_deserializer","value":"pub fn with_deserializer<'a, A, R>(&Self, R, A) -> A::Output where\nA: DeserializerAcceptor, R: BincodeRead","parent":null,"children":[],"decl_id":null,"docs":" Executes the acceptor with a serde::Deserializer instance.\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ Executes the acceptor with a serde::Deserializer instance.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":20050,"byte_end":20112,"line_start":508,"line_end":508,"column_start":5,"column_end":67}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":20117,"byte_end":20156,"line_start":509,"line_end":509,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":20654,"byte_end":20669,"line_start":525,"line_end":525,"column_start":12,"column_end":27},"name":"with_serializer","qualname":"<Config>::with_serializer","value":"pub fn with_serializer<A, W>(&Self, W, A) -> A::Output where\nA: SerializerAcceptor, W: Write","parent":null,"children":[],"decl_id":null,"docs":" Executes the acceptor with a serde::Serializer instance.\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ Executes the acceptor with a serde::Serializer instance.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":20519,"byte_end":20579,"line_start":522,"line_end":522,"column_start":5,"column_end":65}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":20584,"byte_end":20623,"line_start":523,"line_end":523,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":283},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35298,"byte_end":35309,"line_start":9,"line_end":9,"column_start":11,"column_end":22},"name":"BincodeRead","qualname":"::de::read::BincodeRead","value":"BincodeRead<'storage>: io::Read","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":288}],"decl_id":null,"docs":" An optional Read trait for advanced Bincode usage.","sig":null,"attributes":[{"value":"/ An optional Read trait for advanced Bincode usage.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35110,"byte_end":35164,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35165,"byte_end":35168,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ It is highly recommended to use bincode with `io::Read` or `&[u8]` before","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35169,"byte_end":35246,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ implementing a custom `BincodeRead`.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35247,"byte_end":35287,"line_start":8,"line_end":8,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35415,"byte_end":35431,"line_start":11,"line_end":11,"column_start":8,"column_end":24},"name":"forward_read_str","qualname":"::de::read::BincodeRead::forward_read_str","value":"pub fn forward_read_str<V>(&mut Self, usize, V) -> Result<V::Value> where\nV: serde::de::Visitor","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Forwards reading `length` bytes of a string on to the serde reader.\n","sig":null,"attributes":[{"value":"/ Forwards reading `length` bytes of a string on to the serde reader.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35336,"byte_end":35407,"line_start":10,"line_end":10,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35621,"byte_end":35636,"line_start":16,"line_end":16,"column_start":8,"column_end":23},"name":"get_byte_buffer","qualname":"::de::read::BincodeRead::get_byte_buffer","value":"pub fn get_byte_buffer(&mut Self, usize) -> Result<Vec<u8>>","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Return the first `length` bytes of the internal byte buffer.\n","sig":null,"attributes":[{"value":"/ Return the first `length` bytes of the internal byte buffer.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35549,"byte_end":35613,"line_start":15,"line_end":15,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35755,"byte_end":35773,"line_start":19,"line_end":19,"column_start":8,"column_end":26},"name":"forward_read_bytes","qualname":"::de::read::BincodeRead::forward_read_bytes","value":"pub fn forward_read_bytes<V>(&mut Self, usize, V) -> Result<V::Value> where\nV: serde::de::Visitor","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Forwards reading `length` bytes on to the serde reader.\n","sig":null,"attributes":[{"value":"/ Forwards reading `length` bytes on to the serde reader.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35688,"byte_end":35747,"line_start":18,"line_end":18,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":290},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36004,"byte_end":36015,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"SliceReader","qualname":"::de::read::SliceReader","value":"SliceReader {  }","parent":null,"children":[{"krate":0,"index":292}],"decl_id":null,"docs":" A BincodeRead implementation for byte slices\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ A BincodeRead implementation for byte slices","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35889,"byte_end":35937,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35938,"byte_end":35977,"line_start":25,"line_end":25,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":293},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36173,"byte_end":36181,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"IoReader","qualname":"::de::read::IoReader","value":"IoReader {  }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"decl_id":null,"docs":" A BincodeRead implementation for io::Readers\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ A BincodeRead implementation for io::Readers","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36058,"byte_end":36106,"line_start":31,"line_end":31,"column_start":1,"column_end":49}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36107,"byte_end":36146,"line_start":32,"line_end":32,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36315,"byte_end":36318,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<SliceReader>::new","value":"pub fn new(&'storage [u8]) -> SliceReader","parent":null,"children":[],"decl_id":null,"docs":" Constructs a slice reader\n","sig":null,"attributes":[{"value":"/ Constructs a slice reader","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36274,"byte_end":36303,"line_start":40,"line_end":40,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36483,"byte_end":36486,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<IoReader<R>>::new","value":"pub fn new(R) -> IoReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an IoReadReader\n","sig":null,"attributes":[{"value":"/ Constructs an IoReadReader","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36441,"byte_end":36471,"line_start":47,"line_end":47,"column_start":5,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":501},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41131,"byte_end":41137,"line_start":9,"line_end":9,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"::std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" The result of a serialization or deserialization operation.\n","sig":null,"attributes":[{"value":"/ The result of a serialization or deserialization operation.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41058,"byte_end":41121,"line_start":8,"line_end":8,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":503},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41244,"byte_end":41249,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Box<ErrorKind>","parent":null,"children":[],"decl_id":null,"docs":" An error that can be produced during (de)serializing.\n","sig":null,"attributes":[{"value":"/ An error that can be produced during (de)serializing.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41177,"byte_end":41234,"line_start":11,"line_end":11,"column_start":1,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1054},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41545,"byte_end":41547,"line_start":19,"line_end":19,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::ErrorKind::Io","value":"ErrorKind::Io(io::Error)","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" If the error stems from the reader/writer that is being used\n during (de)serialization, that error will be stored and returned here.\n","sig":null,"attributes":[{"value":"/ If the error stems from the reader/writer that is being used","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41397,"byte_end":41461,"line_start":17,"line_end":17,"column_start":5,"column_end":69}},{"value":"/ during (de)serialization, that error will be stored and returned here.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41466,"byte_end":41540,"line_start":18,"line_end":18,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1057},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41657,"byte_end":41676,"line_start":21,"line_end":21,"column_start":5,"column_end":24},"name":"InvalidUtf8Encoding","qualname":"::error::ErrorKind::InvalidUtf8Encoding","value":"ErrorKind::InvalidUtf8Encoding(Utf8Error)","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a string that is not valid utf8\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a string that is not valid utf8","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41564,"byte_end":41652,"line_start":20,"line_end":20,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1060},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41811,"byte_end":41830,"line_start":24,"line_end":24,"column_start":5,"column_end":24},"name":"InvalidBoolEncoding","qualname":"::error::ErrorKind::InvalidBoolEncoding","value":"ErrorKind::InvalidBoolEncoding(u8)","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a bool that was\n not encoded as either a 1 or a 0\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a bool that was","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41693,"byte_end":41765,"line_start":22,"line_end":22,"column_start":5,"column_end":77}},{"value":"/ not encoded as either a 1 or a 0","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41770,"byte_end":41806,"line_start":23,"line_end":23,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1063},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41943,"byte_end":41962,"line_start":26,"line_end":26,"column_start":5,"column_end":24},"name":"InvalidCharEncoding","qualname":"::error::ErrorKind::InvalidCharEncoding","value":"ErrorKind::InvalidCharEncoding","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a char that is not in the correct format.\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a char that is not in the correct format.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41840,"byte_end":41938,"line_start":25,"line_end":25,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1065},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42091,"byte_end":42109,"line_start":29,"line_end":29,"column_start":5,"column_end":23},"name":"InvalidTagEncoding","qualname":"::error::ErrorKind::InvalidTagEncoding","value":"ErrorKind::InvalidTagEncoding(usize)","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize the tag of an enum that is\n not in the expected ranges\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize the tag of an enum that is","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41968,"byte_end":42051,"line_start":27,"line_end":27,"column_start":5,"column_end":88}},{"value":"/ not in the expected ranges","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42056,"byte_end":42086,"line_start":28,"line_end":28,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1068},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42251,"byte_end":42277,"line_start":32,"line_end":32,"column_start":5,"column_end":31},"name":"DeserializeAnyNotSupported","qualname":"::error::ErrorKind::DeserializeAnyNotSupported","value":"ErrorKind::DeserializeAnyNotSupported","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" Serde has a deserialize_any method that lets the format hint to the\n object which route to take in deserializing.\n","sig":null,"attributes":[{"value":"/ Serde has a deserialize_any method that lets the format hint to the","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42122,"byte_end":42193,"line_start":30,"line_end":30,"column_start":5,"column_end":76}},{"value":"/ object which route to take in deserializing.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42198,"byte_end":42246,"line_start":31,"line_end":31,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1070},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42393,"byte_end":42402,"line_start":35,"line_end":35,"column_start":5,"column_end":14},"name":"SizeLimit","qualname":"::error::ErrorKind::SizeLimit","value":"ErrorKind::SizeLimit","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" If (de)serializing a message takes more than the provided size limit, this\n error is returned.\n","sig":null,"attributes":[{"value":"/ If (de)serializing a message takes more than the provided size limit, this","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42283,"byte_end":42361,"line_start":33,"line_end":33,"column_start":5,"column_end":83}},{"value":"/ error is returned.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42366,"byte_end":42388,"line_start":34,"line_end":34,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1072},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42516,"byte_end":42529,"line_start":37,"line_end":37,"column_start":5,"column_end":18},"name":"SizeTypeLimit","qualname":"::error::ErrorKind::SizeTypeLimit","value":"ErrorKind::SizeTypeLimit","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" If serializing a string/vec/array requires more bytes to represent the size than the config allows.\n","sig":null,"attributes":[{"value":"/ If serializing a string/vec/array requires more bytes to represent the size than the config allows.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42408,"byte_end":42511,"line_start":36,"line_end":36,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1074},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42612,"byte_end":42634,"line_start":39,"line_end":39,"column_start":5,"column_end":27},"name":"SequenceMustHaveLength","qualname":"::error::ErrorKind::SequenceMustHaveLength","value":"ErrorKind::SequenceMustHaveLength","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" Bincode can not encode sequences of unknown length (like iterators).\n","sig":null,"attributes":[{"value":"/ Bincode can not encode sequences of unknown length (like iterators).","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42535,"byte_end":42607,"line_start":38,"line_end":38,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1076},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42683,"byte_end":42689,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Custom","qualname":"::error::ErrorKind::Custom","value":"ErrorKind::Custom(String)","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" A custom error message from Serde.\n","sig":null,"attributes":[{"value":"/ A custom error message from Serde.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42640,"byte_end":42678,"line_start":40,"line_end":40,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":1053},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41381,"byte_end":41390,"line_start":16,"line_end":16,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"pub enum ErrorKind {\n    Io(io::Error),\n    InvalidUtf8Encoding(Utf8Error),\n    InvalidBoolEncoding(u8),\n    InvalidCharEncoding,\n    InvalidTagEncoding(usize),\n    DeserializeAnyNotSupported,\n    SizeLimit,\n    SizeTypeLimit,\n    SequenceMustHaveLength,\n    Custom(String),\n}","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1057},{"krate":0,"index":1060},{"krate":0,"index":1063},{"krate":0,"index":1065},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076}],"decl_id":null,"docs":" The kind of error that can be produced during a serialization or deserialization.\n","sig":null,"attributes":[{"value":"/ The kind of error that can be produced during a serialization or deserialization.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":41269,"byte_end":41354,"line_start":14,"line_end":14,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":611},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":50982,"byte_end":50991,"line_start":196,"line_end":196,"column_start":10,"column_end":19},"name":"Primitive","qualname":"::internal::SizeType::Primitive","value":"type Primitive: serde::de::DeserializeOwned + TryFrom<usize> + Into<u64>;","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":949},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1265,"byte_end":1285,"line_start":45,"line_end":45,"column_start":11,"column_end":31},"name":"DeserializerAcceptor","qualname":"::DeserializerAcceptor","value":"DeserializerAcceptor<'a>","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952}],"decl_id":null,"docs":" An object that implements this trait can be passed a\n serde::Deserializer without knowing its concrete type.","sig":null,"attributes":[{"value":"/ An object that implements this trait can be passed a","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1050,"byte_end":1106,"line_start":40,"line_end":40,"column_start":1,"column_end":57}},{"value":"/ serde::Deserializer without knowing its concrete type.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1107,"byte_end":1165,"line_start":41,"line_end":41,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1166,"byte_end":1169,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This trait should be used only for `with_deserializer` functions.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1170,"byte_end":1239,"line_start":43,"line_end":43,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":951},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1347,"byte_end":1353,"line_start":47,"line_end":47,"column_start":10,"column_end":16},"name":"Output","qualname":"::DeserializerAcceptor::Output","value":"type Output;","parent":{"krate":0,"index":949},"children":[],"decl_id":null,"docs":" The return type for the accept method\n","sig":null,"attributes":[{"value":"/ The return type for the accept method","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1296,"byte_end":1337,"line_start":46,"line_end":46,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1433,"byte_end":1439,"line_start":49,"line_end":49,"column_start":8,"column_end":14},"name":"accept","qualname":"::DeserializerAcceptor::accept","value":"pub fn accept<T>(Self, T) -> Self::Output where T: serde::Deserializer<Error =\nError>","parent":{"krate":0,"index":949},"children":[],"decl_id":null,"docs":" Accept a serde::Deserializer and do whatever you want with it.\n","sig":null,"attributes":[{"value":"/ Accept a serde::Deserializer and do whatever you want with it.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1359,"byte_end":1425,"line_start":48,"line_end":48,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":954},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1743,"byte_end":1761,"line_start":59,"line_end":59,"column_start":11,"column_end":29},"name":"SerializerAcceptor","qualname":"::SerializerAcceptor","value":"SerializerAcceptor","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956}],"decl_id":null,"docs":" An object that implements this trait can be passed a\n serde::Serializer without knowing its concrete type.","sig":null,"attributes":[{"value":"/ An object that implements this trait can be passed a","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1532,"byte_end":1588,"line_start":54,"line_end":54,"column_start":1,"column_end":57}},{"value":"/ serde::Serializer without knowing its concrete type.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1589,"byte_end":1645,"line_start":55,"line_end":55,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1646,"byte_end":1649,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ This trait should be used only for `with_serializer` functions.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1650,"byte_end":1717,"line_start":57,"line_end":57,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":955},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1819,"byte_end":1825,"line_start":61,"line_end":61,"column_start":10,"column_end":16},"name":"Output","qualname":"::SerializerAcceptor::Output","value":"type Output;","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" The return type for the accept method\n","sig":null,"attributes":[{"value":"/ The return type for the accept method","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1768,"byte_end":1809,"line_start":60,"line_end":60,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1903,"byte_end":1909,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"accept","qualname":"::SerializerAcceptor::accept","value":"pub fn accept<T>(Self, T) -> Self::Output where T: serde::Serializer<Ok = (),\nError = ()>","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" Accept a serde::Serializer and do whatever you want with it.\n","sig":null,"attributes":[{"value":"/ Accept a serde::Serializer and do whatever you want with it.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":1831,"byte_end":1895,"line_start":62,"line_end":62,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":958},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2205,"byte_end":2211,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"config","qualname":"::config","value":"pub fn config() -> Config","parent":null,"children":[],"decl_id":null,"docs":" Get a default configuration object.","sig":null,"attributes":[{"value":"/ Get a default configuration object.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2005,"byte_end":2044,"line_start":68,"line_end":68,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2045,"byte_end":2048,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ### Default Configuration:","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2049,"byte_end":2079,"line_start":70,"line_end":70,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2080,"byte_end":2083,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ | Byte limit | Endianness |","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2084,"byte_end":2115,"line_start":72,"line_end":72,"column_start":1,"column_end":32}},{"value":"/ |------------|------------|","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2116,"byte_end":2147,"line_start":73,"line_end":73,"column_start":1,"column_end":32}},{"value":"/ | Unlimited  | Little     |","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2148,"byte_end":2179,"line_start":74,"line_end":74,"column_start":1,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2180,"byte_end":2197,"line_start":75,"line_end":75,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":959},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2495,"byte_end":2509,"line_start":84,"line_end":84,"column_start":8,"column_end":22},"name":"serialize_into","qualname":"::serialize_into","value":"pub fn serialize_into<W, T: ?Sized>(W, &T) -> Result<()> where\nW: std::io::Write, T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serializes an object directly into a `Writer` using the default configuration.","sig":null,"attributes":[{"value":"/ Serializes an object directly into a `Writer` using the default configuration.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2247,"byte_end":2329,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2330,"byte_end":2333,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ If the serialization would take more bytes than allowed by the size limit, an error","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2334,"byte_end":2421,"line_start":82,"line_end":82,"column_start":1,"column_end":88}},{"value":"/ is returned and *no bytes* will be written into the `Writer`.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2422,"byte_end":2487,"line_start":83,"line_end":83,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":962},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2761,"byte_end":2770,"line_start":93,"line_end":93,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serialize","value":"pub fn serialize<T: ?Sized>(&T) -> Result<Vec<u8>> where T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serializes a serializable object into a `Vec` of bytes using the default configuration.\n","sig":null,"attributes":[{"value":"/ Serializes a serializable object into a `Vec` of bytes using the default configuration.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2662,"byte_end":2753,"line_start":92,"line_end":92,"column_start":1,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":964},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3043,"byte_end":3059,"line_start":103,"line_end":103,"column_start":8,"column_end":24},"name":"deserialize_from","qualname":"::deserialize_from","value":"pub fn deserialize_from<R, T>(R) -> Result<T> where R: std::io::Read,\nT: serde::de::DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er using the default configuration.","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er using the default configuration.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2878,"byte_end":2962,"line_start":100,"line_end":100,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2963,"byte_end":2966,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":2967,"byte_end":3035,"line_start":102,"line_end":102,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":967},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3494,"byte_end":3517,"line_start":116,"line_end":116,"column_start":8,"column_end":31},"name":"deserialize_from_custom","qualname":"::deserialize_from_custom","value":"pub fn deserialize_from_custom<'a, R, T>(R) -> Result<T> where\nR: de::read::BincodeRead, T: serde::de::DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er using the default configuration.\n It is highly recommended to use `deserialize_from` unless you need to implement\n `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er using the default configuration.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3197,"byte_end":3286,"line_start":111,"line_end":111,"column_start":1,"column_end":90}},{"value":"/ It is highly recommended to use `deserialize_from` unless you need to implement","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3287,"byte_end":3370,"line_start":112,"line_end":112,"column_start":1,"column_end":84}},{"value":"/ `BincodeRead` for performance reasons.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3371,"byte_end":3413,"line_start":113,"line_end":113,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3414,"byte_end":3417,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3418,"byte_end":3486,"line_start":115,"line_end":115,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":971},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3789,"byte_end":3809,"line_start":128,"line_end":128,"column_start":8,"column_end":28},"name":"deserialize_in_place","qualname":"::deserialize_in_place","value":"pub fn deserialize_in_place<'a, R, T>(R, &mut T) -> Result<()> where\nT: serde::de::Deserialize, R: BincodeRead","parent":null,"children":[],"decl_id":null,"docs":" Only use this if you know what you're doing.","sig":null,"attributes":[{"value":"/ Only use this if you know what you're doing.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3678,"byte_end":3726,"line_start":124,"line_end":124,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3727,"byte_end":3730,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ This is part of the public API.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3731,"byte_end":3766,"line_start":126,"line_end":126,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":975},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":4077,"byte_end":4088,"line_start":137,"line_end":137,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::deserialize","value":"pub fn deserialize<'a, T>(&'a [u8]) -> Result<T> where\nT: serde::de::Deserialize","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes into an instance of `T` using the default configuration.\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes into an instance of `T` using the default configuration.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":3979,"byte_end":4069,"line_start":136,"line_end":136,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":978},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":4316,"byte_end":4331,"line_start":145,"line_end":145,"column_start":8,"column_end":23},"name":"serialized_size","qualname":"::serialized_size","value":"pub fn serialized_size<T: ?Sized>(&T) -> Result<u64> where T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size that an object would be if serialized using Bincode with the default configuration.\n","sig":null,"attributes":[{"value":"/ Returns the size that an object would be if serialized using Bincode with the default configuration.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":4204,"byte_end":4308,"line_start":144,"line_end":144,"column_start":1,"column_end":105}}]},{"kind":"Function","id":{"krate":0,"index":980},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":4566,"byte_end":4583,"line_start":155,"line_end":155,"column_start":8,"column_end":25},"name":"with_deserializer","qualname":"::with_deserializer","value":"pub fn with_deserializer<'a, A, R>(R, A) -> A::Output where\nA: DeserializerAcceptor, R: BincodeRead","parent":null,"children":[],"decl_id":null,"docs":" Executes the acceptor with a serde::Deserializer instance.\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ Executes the acceptor with a serde::Deserializer instance.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":4441,"byte_end":4503,"line_start":152,"line_end":152,"column_start":1,"column_end":63}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":4504,"byte_end":4543,"line_start":153,"line_end":153,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":984},"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":4871,"byte_end":4886,"line_start":166,"line_end":166,"column_start":8,"column_end":23},"name":"with_serializer","qualname":"::with_serializer","value":"pub fn with_serializer<A, W>(W, A) -> A::Output where A: SerializerAcceptor,\nW: std::io::Write","parent":null,"children":[],"decl_id":null,"docs":" Executes the acceptor with a serde::Serializer instance.\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ Executes the acceptor with a serde::Serializer instance.","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":4748,"byte_end":4808,"line_start":163,"line_end":163,"column_start":1,"column_end":61}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/lib.rs","byte_start":4809,"byte_end":4848,"line_start":164,"line_end":164,"column_start":1,"column_end":40}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":6855,"byte_end":6856,"line_start":69,"line_end":69,"column_start":33,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":6866,"byte_end":6880,"line_start":71,"line_end":71,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":6975,"byte_end":6989,"line_start":77,"line_end":77,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":9520,"byte_end":9534,"line_start":164,"line_end":164,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":9771,"byte_end":9786,"line_start":174,"line_end":174,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":10008,"byte_end":10029,"line_start":184,"line_end":184,"column_start":31,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":10274,"byte_end":10294,"line_start":194,"line_end":194,"column_start":31,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":10559,"byte_end":10574,"line_start":204,"line_end":204,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":10860,"byte_end":10874,"line_start":216,"line_end":216,"column_start":54,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":11130,"byte_end":11151,"line_start":227,"line_end":227,"column_start":53,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":11410,"byte_end":11430,"line_start":238,"line_end":238,"column_start":53,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14314,"byte_end":14320,"line_start":340,"line_end":340,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36246,"byte_end":36257,"line_start":39,"line_end":39,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36423,"byte_end":36431,"line_start":46,"line_end":46,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36632,"byte_end":36643,"line_start":56,"line_end":56,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36951,"byte_end":36959,"line_start":67,"line_end":67,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":37232,"byte_end":37243,"line_start":78,"line_end":78,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":37493,"byte_end":37504,"line_start":88,"line_end":88,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":38828,"byte_end":38836,"line_start":134,"line_end":134,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":40099,"byte_end":40107,"line_start":167,"line_end":167,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/mod.rs","byte_start":21838,"byte_end":21850,"line_start":34,"line_end":34,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":351},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/mod.rs","byte_start":28581,"byte_end":28587,"line_start":249,"line_end":249,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/mod.rs","byte_start":30442,"byte_end":30448,"line_start":309,"line_end":309,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":447},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42720,"byte_end":42729,"line_start":44,"line_end":44,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":44373,"byte_end":44378,"line_start":82,"line_end":82,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":44485,"byte_end":44494,"line_start":88,"line_end":88,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":45651,"byte_end":45656,"line_start":112,"line_end":112,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":45797,"byte_end":45802,"line_start":118,"line_end":118,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":47104,"byte_end":47113,"line_start":47,"line_end":47,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":50419,"byte_end":50426,"line_start":166,"line_end":166,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":50756,"byte_end":50764,"line_start":183,"line_end":183,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":51732,"byte_end":51735,"line_start":221,"line_end":221,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":52063,"byte_end":52066,"line_start":235,"line_end":235,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":52394,"byte_end":52397,"line_start":249,"line_end":249,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":52724,"byte_end":52726,"line_start":263,"line_end":263,"column_start":19,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":53546,"byte_end":53556,"line_start":25,"line_end":25,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":59189,"byte_end":59200,"line_start":227,"line_end":227,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":725},{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":64266,"byte_end":64274,"line_start":424,"line_end":424,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":64666,"byte_end":64674,"line_start":446,"line_end":446,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":65072,"byte_end":65080,"line_start":468,"line_end":468,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":65477,"byte_end":65485,"line_start":490,"line_end":490,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":65873,"byte_end":65881,"line_start":512,"line_end":512,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":66451,"byte_end":66459,"line_start":542,"line_end":542,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":66877,"byte_end":66885,"line_start":564,"line_end":564,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":67389,"byte_end":67401,"line_start":590,"line_end":590,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":67760,"byte_end":67772,"line_start":608,"line_end":608,"column_start":53,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":68137,"byte_end":68149,"line_start":626,"line_end":626,"column_start":59,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":68513,"byte_end":68525,"line_start":644,"line_end":644,"column_start":60,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":68885,"byte_end":68897,"line_start":662,"line_end":662,"column_start":56,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":69434,"byte_end":69446,"line_start":688,"line_end":688,"column_start":54,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":69831,"byte_end":69843,"line_start":706,"line_end":706,"column_start":61,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":71260,"byte_end":71270,"line_start":761,"line_end":761,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":5646,"byte_end":5653,"line_start":21,"line_end":21,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":73},"to":{"krate":0,"index":79}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":5656,"byte_end":5661,"line_start":21,"line_end":21,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":3021},"to":{"krate":0,"index":79}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":6855,"byte_end":6856,"line_start":69,"line_end":69,"column_start":33,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":98},"to":{"krate":0,"index":79}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":6866,"byte_end":6880,"line_start":71,"line_end":71,"column_start":6,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":70},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":6975,"byte_end":6989,"line_start":77,"line_end":77,"column_start":18,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":70},"to":{"krate":0,"index":73}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":9520,"byte_end":9534,"line_start":164,"line_end":164,"column_start":32,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":9771,"byte_end":9786,"line_start":174,"line_end":174,"column_start":32,"column_end":47},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":10008,"byte_end":10029,"line_start":184,"line_end":184,"column_start":31,"column_end":52},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":10274,"byte_end":10294,"line_start":194,"line_end":194,"column_start":31,"column_end":51},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":10559,"byte_end":10574,"line_start":204,"line_end":204,"column_start":54,"column_end":69},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":112},"to":{"krate":0,"index":73}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":10860,"byte_end":10874,"line_start":216,"line_end":216,"column_start":54,"column_end":68},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":107},"to":{"krate":0,"index":73}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":11130,"byte_end":11151,"line_start":227,"line_end":227,"column_start":53,"column_end":74},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":117},"to":{"krate":0,"index":73}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":11410,"byte_end":11430,"line_start":238,"line_end":238,"column_start":53,"column_end":73},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":122},"to":{"krate":0,"index":73}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/config.rs","byte_start":14314,"byte_end":14320,"line_start":340,"line_end":340,"column_start":6,"column_end":12},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1024},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":35325,"byte_end":35329,"line_start":9,"line_end":9,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":4346},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36246,"byte_end":36257,"line_start":39,"line_end":39,"column_start":16,"column_end":27},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36423,"byte_end":36431,"line_start":46,"line_end":46,"column_start":9,"column_end":17},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36632,"byte_end":36643,"line_start":56,"line_end":56,"column_start":29,"column_end":40},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":290},"to":{"krate":1,"index":4346}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":36951,"byte_end":36959,"line_start":67,"line_end":67,"column_start":32,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":293},"to":{"krate":1,"index":4346}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":37232,"byte_end":37243,"line_start":78,"line_end":78,"column_start":16,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":37493,"byte_end":37504,"line_start":88,"line_end":88,"column_start":42,"column_end":53},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":290},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":38828,"byte_end":38836,"line_start":134,"line_end":134,"column_start":9,"column_end":17},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/read.rs","byte_start":40099,"byte_end":40107,"line_start":167,"line_end":167,"column_start":33,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":293},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/mod.rs","byte_start":21838,"byte_end":21850,"line_start":34,"line_end":34,"column_start":44,"column_end":56},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/mod.rs","byte_start":28581,"byte_end":28587,"line_start":249,"line_end":249,"column_start":17,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":408},"to":{"krate":21,"index":1679}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/de/mod.rs","byte_start":30442,"byte_end":30448,"line_start":309,"line_end":309,"column_start":17,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":432},"to":{"krate":21,"index":1697}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":42720,"byte_end":42729,"line_start":44,"line_end":44,"column_start":19,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":44373,"byte_end":44378,"line_start":82,"line_end":82,"column_start":26,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":503},"to":{"krate":2,"index":2922}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":44485,"byte_end":44494,"line_start":88,"line_end":88,"column_start":23,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1053},"to":{"krate":2,"index":9401}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":45651,"byte_end":45656,"line_start":112,"line_end":112,"column_start":27,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":503},"to":{"krate":21,"index":8611}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/error.rs","byte_start":45797,"byte_end":45802,"line_start":118,"line_end":118,"column_start":28,"column_end":33},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":503},"to":{"krate":21,"index":9224}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":47104,"byte_end":47113,"line_start":47,"line_end":47,"column_start":34,"column_end":43},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1081},"to":{"krate":0,"index":601}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":49805,"byte_end":49810,"line_start":148,"line_end":148,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2637},"to":{"krate":0,"index":601}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":50419,"byte_end":50426,"line_start":166,"line_end":166,"column_start":20,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1088},"to":{"krate":0,"index":601}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":50756,"byte_end":50764,"line_start":183,"line_end":183,"column_start":20,"column_end":28},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1094},"to":{"krate":0,"index":601}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":50965,"byte_end":50970,"line_start":195,"line_end":195,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2637},"to":{"krate":0,"index":610}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":51732,"byte_end":51735,"line_start":221,"line_end":221,"column_start":19,"column_end":22},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1099},"to":{"krate":0,"index":610}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":52063,"byte_end":52066,"line_start":235,"line_end":235,"column_start":19,"column_end":22},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1104},"to":{"krate":0,"index":610}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":52394,"byte_end":52397,"line_start":249,"line_end":249,"column_start":19,"column_end":22},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1109},"to":{"krate":0,"index":610}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/internal.rs","byte_start":52724,"byte_end":52726,"line_start":263,"line_end":263,"column_start":19,"column_end":21},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1114},"to":{"krate":0,"index":610}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":53546,"byte_end":53556,"line_start":25,"line_end":25,"column_start":28,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":666},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":59189,"byte_end":59200,"line_start":227,"line_end":227,"column_start":18,"column_end":29},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":64266,"byte_end":64274,"line_start":424,"line_end":424,"column_start":45,"column_end":53},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":775},"to":{"krate":21,"index":2131}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":64666,"byte_end":64674,"line_start":446,"line_end":446,"column_start":47,"column_end":55},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":775},"to":{"krate":21,"index":2137}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":65072,"byte_end":65080,"line_start":468,"line_end":468,"column_start":53,"column_end":61},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":775},"to":{"krate":21,"index":2143}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":65477,"byte_end":65485,"line_start":490,"line_end":490,"column_start":54,"column_end":62},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":775},"to":{"krate":21,"index":2149}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":65873,"byte_end":65881,"line_start":512,"line_end":512,"column_start":45,"column_end":53},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":775},"to":{"krate":21,"index":2155}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":66451,"byte_end":66459,"line_start":542,"line_end":542,"column_start":48,"column_end":56},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":775},"to":{"krate":21,"index":2166}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":66877,"byte_end":66885,"line_start":564,"line_end":564,"column_start":55,"column_end":63},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":775},"to":{"krate":21,"index":2173}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":67389,"byte_end":67401,"line_start":590,"line_end":590,"column_start":51,"column_end":63},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":845},"to":{"krate":21,"index":2131}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":67760,"byte_end":67772,"line_start":608,"line_end":608,"column_start":53,"column_end":65},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":845},"to":{"krate":21,"index":2137}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":68137,"byte_end":68149,"line_start":626,"line_end":626,"column_start":59,"column_end":71},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":845},"to":{"krate":21,"index":2143}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":68513,"byte_end":68525,"line_start":644,"line_end":644,"column_start":60,"column_end":72},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":845},"to":{"krate":21,"index":2149}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":68885,"byte_end":68897,"line_start":662,"line_end":662,"column_start":56,"column_end":68},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":845},"to":{"krate":21,"index":2155}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":69434,"byte_end":69446,"line_start":688,"line_end":688,"column_start":54,"column_end":66},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":845},"to":{"krate":21,"index":2166}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":69831,"byte_end":69843,"line_start":706,"line_end":706,"column_start":61,"column_end":73},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":845},"to":{"krate":21,"index":2173}},{"span":{"file_name":"/home/clarisco/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode2-2.0.1/src/ser/mod.rs","byte_start":71260,"byte_end":71270,"line_start":761,"line_end":761,"column_start":6,"column_end":16},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":916},"to":{"krate":4294967295,"index":4294967295}}]}